/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HDLParser.jj */
/*@egen*/options
{
  IGNORE_CASE = false;
             
                 
  STATIC = false;
                      
}

PARSER_BEGIN(HDLParser)
package hdlparser;
import hdlparser.ExecutionVisitor.ExecutionException;
import hdlparser.CheckVisitor.HDLCheckException;
import java.nio.charset.StandardCharsets;

import java.io.*;
import java.util.HashMap;
import symbols.Symbol;

public class HDLParser/*@bgen(jjtree)*/implements HDLParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTHDLParserState jjtree = new JJTHDLParserState();

/*@egen*/
  
  public static void main(String[] args) throws ParseException, FileNotFoundException
  {
 
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

    HDLParser parser = new HDLParser(new FileInputStream(args[0]));


    parser.jj_input_stream.setTabSize(4);
    
    SimpleNode root = parser.file();
    //root.dump(" ");

	HashMap<String, Symbol> ST = new HashMap();
	CheckVisitor cv = new CheckVisitor(ST);

	try {
        root.jjtAccept(cv, null);
    } catch (HDLCheckException e) {
                System.err.println(e.getMessage());
                return;
    }
    
    
    ExecutionVisitor ev = new ExecutionVisitor();

    try {
      	root.jjtAccept(ev, ST);
    } catch (ExecutionException e) {
		System.err.println(e.getMessage());
    }
    System.out.println(ST);
  }
  public static SimpleNode parseFile(String file) throws ParseException, FileNotFoundException {
	HDLParser parser = new HDLParser(new FileInputStream(file));
    parser.jj_input_stream.setTabSize(4);
    return parser.file();
  }
  public static SimpleNode parseString(String hdlStr) throws ParseException {
	HDLParser parser = new HDLParser(new ByteArrayInputStream(hdlStr.getBytes(StandardCharsets.UTF_8)));
    parser.jj_input_stream.setTabSize(4);
    return parser.file();
  }
}

PARSER_END(HDLParser)

SKIP:   /* Whitespace, Comments */
{
  "\t"
| "\n"
| "\r"
| " "
| < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

TOKEN:
{
  <OP: "+" | "-" | "&" | "|" | "^">
| <NOT: "~">
| <REL_OP:  "==" | "!=">
| <NUM: (["0"-"9"])+>
| <HEX_LIT: "0x" (["0"-"9","a"-"f","A"-"F"])+>
| <BIN_LIT: "0b" (["0"-"1"])+>
|  <STRING: "\""  ("\\" ("\\" | "n" | "r" | "'") | ~["\\","\n","\r","'"] )* "\"">
}

SimpleNode file(): {/*@bgen(jjtree) file */
  ASTfile jjtn000 = new ASTfile(JJTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) file */
        try {
/*@egen*/
	(declaration())* [ block() ] <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void block(): {/*@bgen(jjtree) block */
  ASTblock jjtn000 = new ASTblock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) block */
        try {
/*@egen*/
	(
		assignment() | if_stmt() | set_label()
	)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void if_stmt(): {/*@bgen(jjtree) if_stmt */
  ASTif_stmt jjtn000 = new ASTif_stmt(JJTIF_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) if_stmt */
        try {
/*@egen*/
	"if" expr() "{" block() "}" (LOOKAHEAD(2) else_if_stmt())* [ else_stmt() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void else_if_stmt(): {/*@bgen(jjtree) else_if_stmt */
  ASTelse_if_stmt jjtn000 = new ASTelse_if_stmt(JJTELSE_IF_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) else_if_stmt */
        try {
/*@egen*/
	"else" "if" expr() "{" block() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void else_stmt(): {/*@bgen(jjtree) else_stmt */
  ASTelse_stmt jjtn000 = new ASTelse_stmt(JJTELSE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) else_stmt */
        try {
/*@egen*/
	"else" "{" block() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void declaration(): {/*@bgen(jjtree) declaration */
  ASTdeclaration jjtn000 = new ASTdeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) declaration */
        try {
/*@egen*/
  	(t = "input" | t= "output" | t="signal")
	{
	   jjtn000.value = t.image;
	}
	["[" number() "]"] 
	id() ("," id())* ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void assignment(): {/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) assignment */
        try {
/*@egen*/
	target() (":" target())* "=" expr() ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void target(): {/*@bgen(jjtree) target */
  ASTtarget jjtn000 = new ASTtarget(JJTTARGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) target */
        try {
/*@egen*/
	id() [ index() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void index(): {/*@bgen(jjtree) index */
        ASTindex jjtn000 = new ASTindex(JJTINDEX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) index */
        try {
/*@egen*/
	"[" number() [(".."|":") number()] "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void expr(): {/*@bgen(jjtree) expr */
  ASTexpr jjtn000 = new ASTexpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) expr */
        try {
/*@egen*/
	subexpr() (":" subexpr())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void subexpr()      : {
	Token t;
}
{
	term()
	(
	  t = <REL_OP> term()/*@bgen(jjtree) #subexpr( 2) */
          {
            ASTsubexpr jjtn001 = new ASTsubexpr(JJTSUBEXPR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtc001 = false;
            jjtn001.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  {
		 jjtn001.value = t.image;
	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	             
	)*
}
void term()      : {
  Token t;
}
{
	subterm()
	(
	  t = <OP> subterm()/*@bgen(jjtree) #term( 2) */
          {
            ASTterm jjtn001 = new ASTterm(JJTTERM);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtc001 = false;
            jjtn001.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  {
		 jjtn001.value = t.image;
	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	          
	)*
}
void subterm(): {/*@bgen(jjtree) subterm */
  ASTsubterm jjtn000 = new ASTsubterm(JJTSUBTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) subterm */
        try {
/*@egen*/
  	{
		jjtn000.value = false;
  	}
	[<NOT> {
		jjtn000.value = true;
	}]
	primary() [index()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void primary()      : {
}
{
	id() | hex() | bin() | number() | ( "(" expr() ")" )
}
String id(): {/*@bgen(jjtree) id */
  ASTid jjtn000 = new ASTid(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) id */
        try {
/*@egen*/
	t = <ID>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {
		jjtn000.value = t.image;
		return t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void number(): {/*@bgen(jjtree) number */
  ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) number */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {
		jjtn000.value = Integer.parseInt(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void hex(): {/*@bgen(jjtree) hex */
  ASThex jjtn000 = new ASThex(JJTHEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) hex */
        try {
/*@egen*/
	t = <HEX_LIT>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {
		jjtn000.value = t.image.substring(2);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void bin(): {/*@bgen(jjtree) bin */
  ASTbin jjtn000 = new ASTbin(JJTBIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) bin */
        try {
/*@egen*/
	t = <BIN_LIT>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {
		jjtn000.value = t.image.substring(2);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void set_label(): {/*@bgen(jjtree) set_label */
  ASTset_label jjtn000 = new ASTset_label(JJTSET_LABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) set_label */
        try {
/*@egen*/
	"label"
	t = <STRING> {
		jjtn000.value = t.image.substring(1,t.image.length()-1);
	}
	";"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
TOKEN: {
	<ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
}